openapi: 3.0.0
info:
  title: Image Generator API
  description: API para gerenciamento de imagens geradas por IA
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:3000
    description: Servidor de desenvolvimento
  - url: https://api.example.com
    description: Servidor de produção

tags:
  - name: Users
    description: Operações relacionadas a usuários
  - name: Authentication
    description: Operações de autenticação
  - name: Images
    description: Operações relacionadas a imagens

paths:
  /user:
    post:
      tags:
        - Users
      summary: Criar novo usuário
      description: Registra um novo usuário no sistema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Email do usuário
                  example: 'user@example.com'
                username:
                  type: string
                  description: Nome de usuário único
                  example: 'johndoe'
                password:
                  type: string
                  format: password
                  description: Senha do usuário
                  example: 'SecurePass123!'
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: '550e8400-e29b-41d4-a716-446655440000'
                  email:
                    type: string
                    example: 'user@example.com'
                  username:
                    type: string
                    example: 'johndoe'
                  createdAt:
                    type: string
                    format: date-time
                    example: '2024-01-20T10:30:00.000Z'
                  updatedAt:
                    type: string
                    format: date-time
                    example: '2024-01-20T10:30:00.000Z'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                examples:
                  emailRequired:
                    value:
                      error: 'Email é obrigatório'
                  usernameRequired:
                    value:
                      error: 'Username é obrigatório'
                  passwordRequired:
                    value:
                      error: 'Senha é obrigatório'
                  emailExists:
                    value:
                      error: 'Email já cadastrado'
                  usernameExists:
                    value:
                      error: 'Username já cadastrado'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Erro ao criar usuário'

  /users:
    get:
      tags:
        - Users
      summary: Listar todos os usuários
      description: Retorna uma lista de todos os usuários cadastrados
      responses:
        '200':
          description: Lista de usuários retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserComplete'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Erro ao listar usuários'

  /user/{id}:
    patch:
      tags:
        - Users
      summary: Atualizar usuário
      description: Atualiza as informações de um usuário existente
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID do usuário
          example: '550e8400-e29b-41d4-a716-446655440000'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Novo email do usuário
                  example: 'newemail@example.com'
                username:
                  type: string
                  description: Novo nome de usuário
                  example: 'newusername'
      responses:
        '200':
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserComplete'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                examples:
                  emailExists:
                    value:
                      error: 'Email ja cadastrado'
                  usernameExists:
                    value:
                      error: 'Username ja cadastrado'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Usuário nao encontrado'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Erro ao atualizar usuário'

    delete:
      tags:
        - Users
      summary: Deletar usuário
      description: Remove um usuário do sistema
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID do usuário a ser deletado
          example: '550e8400-e29b-41d4-a716-446655440000'
      responses:
        '200':
          description: Usuário deletado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Usuário deletado com sucesso'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Usuário nao encontrado'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Erro ao deletar usuário'

  /login:
    post:
      tags:
        - Authentication
      summary: Autenticar usuário
      description: Realiza o hash da senha do usuário (endpoint temporário)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: Email do usuário
                  example: 'user@example.com'
                password:
                  type: string
                  format: password
                  description: Senha do usuário
                  example: 'SecurePass123!'
      responses:
        '200':
          description: Autenticação bem-sucedida
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: 'user@example.com'
                  password:
                    type: string
                    description: Senha com hash bcrypt
                    example: '$2b$10$...'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Erro ao processar autenticação'
  /image:
    post:
      tags:
        - Images
      summary: Criar nova imagem
      description: Faz upload de uma imagem e salva suas informações no banco de dados
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
                - inputResolution
                - promptDetails
                - creatorId
              properties:
                image:
                  type: string
                  format: binary
                  description: Arquivo de imagem a ser enviado
                promptDetails:
                  type: string
                  description: Detalhes do prompt usado para gerar a imagem
                  example: 'A futuristic city with flying cars at sunset'
                negativePrompt:
                  type: string
                  description: Prompt negativo usado na geração
                  example: 'blurry, low quality, distorted'
                inputResolution:
                  type: string
                  description: Resolução da imagem
                  default: '1024x1024'
                  example: '1024x1024'
                seed:
                  type: string
                  description: Seed usada para gerar a imagem
                  example: '123456789'
                creatorId:
                  type: string
                  format: uuid
                  description: ID do usuário criador
                  example: '550e8400-e29b-41d4-a716-446655440000'
      responses:
        '201':
          description: Imagem criada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  image:
                    $ref: '#/components/schemas/Image'
                  uploadDetails:
                    type: object
                    properties:
                      fileName:
                        type: string
                        example: 'a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6_1700000000000.jpg'
                      fileSize:
                        type: number
                        example: 2048576
                      mimeType:
                        type: string
                        example: 'image/jpeg'
                  message:
                    type: string
                    example: 'Imagem salva com sucesso!'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                examples:
                  noFile:
                    value:
                      error: 'Arquivo de imagem é obrigatório'
                  noPrompt:
                    value:
                      error: 'Prompt é obrigatório'
                  noCreator:
                    value:
                      error: 'Creator ID é obrigatório'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Erro ao salvar imagem'

  /images:
    get:
      tags:
        - Images
      summary: Listar todas as imagens
      description: Retorna uma lista paginada de todas as imagens
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Número da página
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Quantidade de itens por página
          example: 10
      responses:
        '200':
          description: Lista de imagens retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImages'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Erro ao buscar imagens'

  /imagesByUser/{id}:
    get:
      tags:
        - Images
      summary: Listar imagens criadas por um usuário
      description: Retorna uma lista paginada de imagens criadas por um usuário específico
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID do usuário
          example: '550e8400-e29b-41d4-a716-446655440000'
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Número da página
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Quantidade de itens por página
          example: 10
      responses:
        '200':
          description: Lista de imagens do usuário retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImages'
        '400':
          description: Requisição inválida
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Usuário precisa estar logado'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Usuário nao encontrado'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Erro ao buscar imagens do usuário'

  /imagesLikedByUser/{id}:
    get:
      tags:
        - Images
      summary: Listar imagens curtidas por um usuário
      description: Retorna uma lista paginada de imagens que foram curtidas por um usuário específico
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID do usuário
          example: '550e8400-e29b-41d4-a716-446655440000'
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Número da página
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Quantidade de itens por página
          example: 10
      responses:
        '200':
          description: Lista de imagens curtidas retornada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImages'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Usuário não encontrado'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Erro ao buscar imagens curtidas pelo usuário'

  /image/{id}:
    delete:
      tags:
        - Images
      summary: Deletar uma imagem
      description: Remove uma imagem do sistema (arquivo local e registro no banco de dados)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID da imagem a ser deletada
          example: '660e8400-e29b-41d4-a716-446655440001'
      responses:
        '200':
          description: Imagem deletada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Imagem deletada com sucesso'
        '404':
          description: Imagem não encontrada
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Imagem não encontrada'
        '500':
          description: Erro interno do servidor
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Erro ao deletar imagem'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
        username:
          type: string
          example: 'johndoe'

    UserComplete:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
        email:
          type: string
          format: email
          example: 'user@example.com'
        username:
          type: string
          example: 'johndoe'
        createdAt:
          type: string
          format: date-time
          example: '2024-01-20T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-01-20T10:30:00.000Z'

    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: '660e8400-e29b-41d4-a716-446655440001'
        imageUrl:
          type: string
          format: uri
          example: 'http://localhost:3000/uploads/a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6_1700000000000.jpg'
        downloadUrl:
          type: string
          format: uri
          example: 'http://localhost:3000/uploads/a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6_1700000000000.jpg'
        promptDetails:
          type: string
          example: 'A futuristic city with flying cars at sunset'
        negativePrompt:
          type: string
          example: 'blurry, low quality, distorted'
        inputResolution:
          type: string
          example: '1024x1024'
        seed:
          type: string
          example: '123456789'
        createdAt:
          type: string
          format: date-time
          example: '2024-01-20T10:30:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-01-20T10:30:00.000Z'
        creator:
          $ref: '#/components/schemas/User'
        likedBy:
          type: array
          items:
            $ref: '#/components/schemas/User'

    PaginatedImages:
      type: object
      properties:
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        total:
          type: integer
          example: 50
          description: Total de imagens no banco
        page:
          type: integer
          example: 1
          description: Página atual
        totalPages:
          type: integer
          example: 5
          description: Total de páginas disponíveis
        hasNext:
          type: boolean
          example: true
          description: Indica se há próxima página
        hasPrev:
          type: boolean
          example: false
          description: Indica se há página anterior
      example:
        images:
          - id: '660e8400-e29b-41d4-a716-446655440001'
            imageUrl: 'http://localhost:3000/uploads/img1_1700000000000.jpg'
            downloadUrl: 'http://localhost:3000/uploads/img1_1700000000000.jpg'
            promptDetails: 'A beautiful sunset over mountains'
            negativePrompt: 'blur, low quality'
            inputResolution: '1024x1024'
            seed: '987654321'
            createdAt: '2024-01-20T10:30:00.000Z'
            updatedAt: '2024-01-20T10:30:00.000Z'
            creator:
              id: '550e8400-e29b-41d4-a716-446655440000'
              username: 'johndoe'
            likedBy:
              - id: '770e8400-e29b-41d4-a716-446655440002'
                username: 'janedoe'
          - id: '660e8400-e29b-41d4-a716-446655440002'
            imageUrl: 'http://localhost:3000/uploads/img2_1700000000001.jpg'
            downloadUrl: 'http://localhost:3000/uploads/img2_1700000000001.jpg'
            promptDetails: 'A cyberpunk street at night'
            negativePrompt: 'daytime, bright'
            inputResolution: '512x512'
            seed: '123456789'
            createdAt: '2024-01-19T15:45:00.000Z'
            updatedAt: '2024-01-19T15:45:00.000Z'
            creator:
              id: '770e8400-e29b-41d4-a716-446655440002'
              username: 'janedoe'
            likedBy: []
        total: 50
        page: 1
        totalPages: 5
        hasNext: true
        hasPrev: false

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT para autenticação

security:
  - bearerAuth: []
